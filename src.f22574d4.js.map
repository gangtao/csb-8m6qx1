{"version":3,"sources":["src/index.js"],"names":["rxjs","interval","merge","operators","take","map","delay","width","height","it","sourceIds","sourceLocations","sourceColors","d3","scaleOrdinal","domain","range","schemaV1","schemaV2","fixSchema","fieldColors","schemeDark2","versionMap","showSchema","updateVersion","i","length","schemaVersion","shuffle","array","currentIndex","randomIndex","Math","floor","random","genData","id","takeCount","numbers","dataRange","delayOptions","takeObjects","pipe","ev","dataPoint","schema","dataObject","loc","time","Date","now","forEach","key","shortenFieldValue","v","stringValue","JSON","stringify","replaceAll","substring","$","console","log","root","select","append","attr","storage","source","schemaVersionLable","style","text","versionLable","schemaLable","runStream","streams","subscribe","data","transition","ease","easeLinear","remove","Object","keys","index","duration","dataEntry","err","error","upgradeId","label"],"mappings":"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","file":"src.f22574d4.js","sourceRoot":"..","sourcesContent":["import \"./styles.css\";\nconst { interval, merge } = rxjs;\nconst { take, map, delay } = rxjs.operators;\n\nconst width = 1200;\nconst height = 500;\nconst it = 1000;\n\nconst sourceIds = [0, 1, 2];\nconst sourceLocations = [\"Palo Alto\", \"Vancouver\", \"Shanghai\"];\n\nconst sourceColors = d3\n  .scaleOrdinal()\n  .domain(sourceIds)\n  .range([\"#FF3B65\", \"#D53C97\", \"#8934D9\"]);\n\nconst schemaV1 = [\"temp\"];\nconst schemaV2 = [\"temp\", \"Humidity\"];\nconst fixSchema = [\"id\", \"loc\", \"time\"];\n\nconst fieldColors = d3\n  .scaleOrdinal()\n  .domain([...fixSchema, ...schemaV2])\n  .range(d3.schemeDark2);\n\nconst versionMap = {\n  0: [schemaV1, \"v1\"],\n  1: [schemaV1, \"v1\"],\n  2: [schemaV1, \"v1\"]\n};\n\nlet showSchema = [...fixSchema, ...schemaV1];\n\nfunction updateVersion() {\n  for (let i = 0; i < sourceIds.length; i++) {\n    const schemaVersion = versionMap[sourceIds[i]];\n    if (schemaVersion[0] === schemaV1) {\n      schemaVersion[0] = schemaV2;\n      schemaVersion[1] = \"v2\";\n      return sourceIds[i];\n    }\n  }\n  return -1;\n}\n\nfunction shuffle(array) {\n  let currentIndex = array.length,\n    randomIndex;\n  while (currentIndex !== 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex]\n    ];\n  }\n\n  return array;\n}\n\nfunction genData(id, takeCount) {\n  const numbers = interval(it);\n\n  const dataRange = {\n    min: 0,\n    max: 10\n  };\n\n  const dataPoint = function (id, schema) {\n    let dataObject = {};\n    dataObject.id = id;\n    dataObject.loc = sourceLocations[id];\n    dataObject.time = Date.now();\n    schema.forEach((key) => {\n      dataObject[key] =\n        Math.floor(Math.random() * (dataRange.max - dataRange.min)) +\n        dataRange.min;\n    });\n    return dataObject;\n  };\n\n  const delayOptions = shuffle([0, 330, 660]);\n\n  const takeObjects = numbers.pipe(\n    take(takeCount),\n    map((ev) => dataPoint(id, versionMap[id][0])),\n    delay(delayOptions[id])\n  );\n\n  return takeObjects;\n}\n\nfunction shortenFieldValue(v) {\n  let stringValue = JSON.stringify(v).replaceAll('\"', \"\");\n  if (stringValue.length > 5) {\n    return stringValue.substring(0, 3) + \"...\";\n  }\n  return stringValue;\n}\n\n$(function () {\n  console.log(\"ready!\");\n  const root = d3\n    .select(\"#chart\")\n    .append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\n  const storage = root.append(\"g\").attr(\"transform\", \"translate(500,50)\");\n  const source = root.append(\"g\").attr(\"transform\", \"translate(130,80)\");\n\n  let schemaVersionLable = [];\n  sourceIds.forEach((id) => {\n    source\n      .append(\"text\")\n      .attr(\"x\", -100)\n      .attr(\"class\", \"sourceLable\")\n      .attr(\"y\", id * 100 + 20)\n      .style(\"fill\", sourceColors(id))\n      .text(sourceLocations[id])\n      .attr(\"font-size\", \"1em\")\n      .attr(\"font-weight\", \"bold\");\n\n    const versionLable = source\n      .append(\"text\")\n      .attr(\"x\", -125)\n      .attr(\"class\", \"sourceLable\")\n      .attr(\"y\", id * 100 + 40)\n      .style(\"fill\", \"#fff\")\n      .text(\"schema version : \" + versionMap[id][1])\n      .attr(\"font-size\", \"0.8em\")\n      .attr(\"font-weight\", \"bold\");\n\n    schemaVersionLable[id] = versionLable;\n  });\n\n  source\n    .append(\"text\")\n    .attr(\"x\", -40)\n    .attr(\"y\", -60)\n    .style(\"fill\", \"#8a8a8a\")\n    .text(\"Data Source\")\n    .attr(\"font-size\", \"0.8em\");\n\n  source\n    .append(\"text\")\n    .attr(\"x\", 120)\n    .attr(\"y\", -60)\n    .style(\"fill\", \"#8a8a8a\")\n    .text(\"Network transimission\")\n    .attr(\"font-size\", \"0.8em\");\n\n  source\n    .append(\"text\")\n    .attr(\"x\", 400)\n    .attr(\"y\", -60)\n    .style(\"fill\", \"#8a8a8a\")\n    .text(\"Data processing system\")\n    .attr(\"font-size\", \"0.8em\");\n\n  source\n    .append(\"line\")\n    .attr(\"x1\", 0)\n    .attr(\"y1\", -50)\n    .attr(\"x2\", 0)\n    .attr(\"y2\", 300)\n    .style(\"stroke\", \"#8a8a8a\")\n    .style(\"stroke-wdith\", 2);\n\n  source\n    .append(\"line\")\n    .attr(\"x1\", 350)\n    .attr(\"y1\", -50)\n    .attr(\"x2\", 350)\n    .attr(\"y2\", 300)\n    .style(\"stroke\", \"#8a8a8a\")\n    .style(\"stroke-wdith\", 2);\n\n  storage\n    .append(\"rect\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 0)\n    .attr(\"width\", 200)\n    .attr(\"height\", 300)\n    .attr(\"rx\", 10)\n    .style(\"fill\", \"#2c2c2c\")\n    .style(\"stroke\", \"#8934d9\")\n    .style(\"stroke-width\", 4);\n\n  const schemaLable = storage.append(\"g\");\n  showSchema.forEach((key, i) => {\n    schemaLable\n      .append(\"text\")\n      .attr(\"x\", 5 + i * 34)\n      .attr(\"y\", 20)\n      .style(\"fill\", fieldColors(key))\n      .text(key)\n      .attr(\"font-size\", \"0.8em\")\n      .attr(\"font-weight\", \"bold\");\n  });\n\n  const runStream = async () => {\n    const streams = sourceIds.map((id) => genData(id, 10));\n    console.log(streams);\n    const stream = merge(...streams);\n\n    stream.subscribe(\n      (data) => {\n        console.log(data);\n        const dataPoint = source.append(\"g\");\n\n        dataPoint\n          .append(\"circle\")\n          .attr(\"cx\", -20)\n          .attr(\"cy\", data.id * 100 + 20)\n          .attr(\"r\", 0)\n          .style(\"fill\", sourceColors(data.id))\n          .transition()\n          .ease(d3.easeLinear)\n          .attr(\"r\", 10)\n          .transition()\n          .remove();\n\n        dataPoint\n          .append(\"rect\")\n          .attr(\"x\", 0)\n          .attr(\"y\", data.id * 100 - 20)\n          .attr(\"width\", 90)\n          .attr(\"height\", 80)\n          .style(\"fill\", \"2c2c2c\")\n          .style(\"fill-opacity\", 0.2)\n          .style(\"stroke\", \"#fff\")\n          .style(\"stroke-width\", 1)\n          .transition()\n          .delay(3000);\n\n        Object.keys(data).forEach((key, index) => {\n          dataPoint\n            .append(\"text\")\n            .attr(\"x\", 5)\n            .attr(\"y\", data.id * 100 + index * 12)\n            .style(\"fill\", fieldColors(key))\n            .text(\"\" + data[key])\n            .attr(\"font-size\", \"0.6em\")\n            .attr(\"font-weight\", \"bold\");\n        });\n\n        dataPoint\n          .transition()\n          .duration(2000)\n          .ease(d3.easeLinear)\n          .attr(\"transform\", \"translate(240,0)\");\n\n        dataPoint.transition().delay(2000).remove();\n\n        const dataEntry = storage.append(\"g\");\n\n        Object.keys(data).forEach((key, i) => {\n          dataEntry\n            .append(\"text\")\n            .attr(\"x\", 5 + i * 34)\n            .attr(\"y\", 30)\n            .style(\"fill\", fieldColors(key))\n            .transition()\n            .delay(2000)\n            .text(shortenFieldValue(data[key]))\n            .attr(\"font-size\", \"0.6em\")\n            .transition()\n            .ease(d3.easeLinear)\n            .duration(3000)\n            .attr(\"y\", 250);\n        });\n\n        dataEntry.transition().delay(5000).remove();\n      },\n      (err) => {\n        console.error(\"something wrong occurred: \" + err);\n      },\n      async () => {\n        const upgradeId = updateVersion();\n\n        schemaVersionLable.forEach((label, i) => {\n          label.text(\"schema version : \" + versionMap[i][1]);\n        });\n\n        if (upgradeId !== -1) {\n          source\n            .append(\"text\")\n            .attr(\"x\", -100)\n            .attr(\"class\", \"sourceLable\")\n            .attr(\"y\", upgradeId * 100 + 20)\n            .style(\"fill\", sourceColors(upgradeId))\n            .text(\"upgrading\")\n            .attr(\"font-size\", \"1em\")\n            .attr(\"font-weight\", \"bold\")\n            .transition()\n            .attr(\"y\", upgradeId * 100 + 60)\n            .transition()\n            .text(\"upgraded\");\n\n          schemaLable\n            .append(\"text\")\n            .attr(\"x\", 5 + 4 * 34)\n            .attr(\"y\", 20)\n            .style(\"fill\", fieldColors(\"Humidity\"))\n            .attr(\"font-size\", \"0.8em\")\n            .attr(\"font-weight\", \"bold\")\n            .transition()\n            .delay(3000)\n            .text(\"humid\");\n        }\n\n        runStream();\n      }\n    );\n  };\n\n  runStream();\n});\n"]}